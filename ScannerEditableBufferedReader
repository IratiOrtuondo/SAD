/Comparación entre el uso de Parsing y Scanner
Para la segunda parte de tu requerimiento, el uso de Scanner con expresiones regulares sería la alternativa. Podemos implementar la lectura y edición usando Scanner, pero Scanner tiene ciertas limitaciones:
Complejidad de Scanner:
No tiene soporte nativo para la lectura de teclas especiales como las flechas, lo que lo hace menos adecuado para este tipo de tarea (interactividad de la consola).
Scanner está diseñado más para leer flujos de texto formateados que para manejar entradas de usuario en tiempo real con teclas especiales.
Conclusiones sobre la complejidad:
Parsing manual:
Ventajas: Mayor control sobre las teclas especiales y la manipulación de la consola en tiempo real.
Desventajas: Requiere más código y manejo de excepciones específicas del sistema.
Scanner:
Ventajas: Facilita el análisis de patrones de texto con expresiones regulares, ideal para la lectura de flujos más simples (por ejemplo, archivos o entradas de texto formateado).
Desventajas: No está diseñado para manejar la interactividad con teclas especiales, lo que lo hace inadecuado para este caso específico.
/

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Scanner;

public class EditableBufferedReader {
    private boolean insertMode; // Modo de inserción o sobrescritura
    private StringBuilder buffer; // Almacena el texto ingresado
    private int cursorPos; // Posición del cursor

    public EditableBufferedReader() {
        this.insertMode = true; // Inicialmente en modo inserción
        this.buffer = new StringBuilder();
        this.cursorPos = 0; // Inicialmente el cursor está al principio
    }

    // Alterna entre modo inserción y sobrescritura
    private void toggleInsertMode() {
        this.insertMode = !this.insertMode;
        System.out.println("\nModo de inserción: " + (insertMode ? "Activado" : "Desactivado"));
    }

    // Método para leer caracteres e interpretar teclas especiales
    public void readLine() throws IOException {
        System.out.println("Escribe una línea (usa las teclas flecha, Home, End, Backspace, Delete e Insert):");

        // Capturamos la entrada del teclado
        Scanner scanner = new Scanner(System.in);

        // Ciclo para leer hasta que se presione Enter
        while (true) {
            // Usamos InputStream para leer un único carácter
            int key = System.in.read();

            // Manejo de teclas especiales
            if (key == 10) { // Enter
                break; // Sale del bucle
            }

            switch (key) {
                case 27: // ESC, indica el inicio de una secuencia de tecla especial
                    int arrowKey = System.in.read(); // Leer siguiente carácter
                    if (arrowKey == '[') {
                        int direction = System.in.read(); // Flechas
                        switch (direction) {
                            case 'C': // Flecha derecha
                                if (cursorPos < buffer.length()) {
                                    cursorPos++; // Mueve el cursor a la derecha
                                }
                                break;
                            case 'D': // Flecha izquierda
                                if (cursorPos > 0) {
                                    cursorPos--; // Mueve el cursor a la izquierda
                                }
                                break;
                            case 'H': // Home
                                cursorPos = 0; // Mueve el cursor al inicio de la línea
                                break;
                            case 'F': // End
                                cursorPos = buffer.length(); // Mueve el cursor al final de la línea
                                break;
                        }
                    }
                    break;

                case 127: // Backspace
                    if (cursorPos > 0) {
                        buffer.deleteCharAt(cursorPos - 1); // Borra el carácter a la izquierda
                        cursorPos--;
                    }
                    break;

                case -1: // EOF
                    break; // Evita un bucle infinito si no hay más caracteres

                case 0: // Placeholder para manejar otras teclas
                    // Aquí puedes manejar otras teclas si es necesario
                    break;

                default: // Carácter normal
                    if (insertMode) { // Modo inserción
                        buffer.insert(cursorPos, (char) key);
                    } else { // Modo sobreescritura
                        if (cursorPos < buffer.length()) {
                            buffer.setCharAt(cursorPos, (char) key);
                        } else {
                            buffer.insert(cursorPos, (char) key);
                        }
                    }
                    cursorPos++;
                    break;
            }

            // Actualiza la línea mostrada
            updateDisplay();
        }

        // Muestra el texto final ingresado
        System.out.println("\nEntrada final: " + buffer.toString());
    }

    // Método para actualizar la visualización del texto y el cursor
    private void updateDisplay() {
        System.out.print("\r" + buffer.toString() + " "); // Muestra el texto ingresado
        System.out.print("\r" + " ".repeat(cursorPos)); // Muestra el cursor
        System.out.flush(); // Asegura que se muestre de inmediato
    }

    public static void main(String[] args) throws IOException {
        EditableBufferedReader editor = new EditableBufferedReader();
        editor.readLine();
    }
}

